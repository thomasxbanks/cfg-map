<%- include('sidebar/sidebar-left', {locals}) %>
<div id="map" class="content with-sidebars"></div>
<%- include('sidebar/sidebar-right', {locals}) %>
<script>
	function initMap() {
		// Define arrays and variables
		var markers = []
		var boundaries = []
		var territoryCoordsArray = []
		var markerCluster
		var territoryCoords
		var geocoder = new google.maps.Geocoder;

		const centerMap = (anchor, zoom) => {
			map.setCenter(anchor);
			map.setZoom(zoom);
		}

		const clusterMarkers = () => {
			// group markers together
			markerCluster = new MarkerClusterer(map, markers,
				{imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'}
			);
		}

		const addMarkers = () => {
			function pinSymbol(color) {
				return {
						path: 'M 18.00,7.50 C 13.03,7.50 9.00,11.53 9.00,16.50 9.00,21.47 13.03,25.50 18.00,25.50 22.97,25.50 27.00,21.47 27.00,16.50 27.00,11.53 22.97,7.50 18.00,7.50 Z M 18.97,47.64 C 18.34,48.18 17.39,48.10 16.86,47.47 16.86,47.47 16.86,47.47 16.86,47.47 5.62,34.26 0.00,24.44 0.00,18.02 0.00,8.07 8.06,0.00 18.00,0.00 27.94,0.00 36.00,8.07 36.00,18.02 36.00,24.44 30.38,34.26 19.14,47.47 19.09,47.53 19.03,47.59 18.97,47.64 Z',
						fillColor: color,
						fillOpacity: 1,
						strokeColor: '#000',
						strokeWeight: 0.5,
						strokeOpacity: 1,
						scale: 0.5,
						anchor: new google.maps.Point(18, 48)
				};
			}
			<% for( var i=0; i < parseInt(locals.markers.length, 10); i++) { %>
				var markerCoordinates = {lat: <%= locals.markers[i].lat %>, lng: <%= locals.markers[i].lng %>}

				var marker = new google.maps.Marker({
					name: "<%- locals.markers[i].name %>",
					status: "Available",
					color: "#004492",
					icon: pinSymbol("#004492"),
					position: markerCoordinates,
					map: map
				});
				markers.push(marker)
				marker.addListener('click', function(e) {
					let franchise = {
						name: this.name,
						location: this.position,
						status: this.status,
						color: this.color
					}
					populateSidebar(franchise)
        });
			<% } %>
			clusterMarkers();
		}

		const addBoundaries = () => {
			<% for( var i = 0; i < parseInt(locals.boundaries.length, 10); i++) { %>
				var options = {
					path: <%- JSON.stringify(locals.boundaries[i]) %>,
					strokeColor: '<%= locals.territories[i].formatting.colour %>',
					strokeOpacity: 1,
					strokeWeight: 1,
					fillColor: '<%= locals.territories[i].formatting.colour %>',
					fillOpacity: '<%= locals.territories[i].formatting.opacity %>'
				}
				var territoryCoords = new google.maps.Polygon(options);
				territoryCoords.setMap(map);
				territoryCoordsArray.push(territoryCoords);
			<% } %>
		}

		const removeMarkers = () => {
			<% for( var i=0; i < parseInt(locals.markers.length, 10); i++) { %>
				markers[<%= i %>].setMap(null);
			<% } %>
			markers = [];
			markerCluster.clearMarkers();
		}

		const removeBoundaries = () => {
			<% for( var i = 0; i < parseInt(locals.boundaries.length, 10); i++) { %>
				territoryCoordsArray[<%= i %>].setMap(null);
			<% } %>
			territoryCoordsArray = [];
		}

		const zoomToFit = () => {
			// Zoom the map on load to show all markers
			console.log('zoomToFit()');
			var bounds = new google.maps.LatLngBounds();
			for (var i = 0; i < markers.length; i++) {
				bounds.extend(markers[i].getPosition());
			}
			map.fitBounds(bounds);
		}

		const addToMap = (target) => {
			if (target === 'markers') {
				addMarkers();
			} else {
				addBoundaries(target);
			}
		}

		const removeFromMap = (target) => {
			if (target === 'markers') {
				removeMarkers()
			} else if (target === 'boundaries') {
				removeBoundaries()
			}
		}
		var checkboxes = [].slice.call(document.querySelectorAll('.js-adjust-map input[type="checkbox"]'))
		checkboxes.forEach((checkbox)=>{
			checkbox.addEventListener('change', (e)=>{
				let target = e.currentTarget.parentElement.getAttribute('data-target');
				if (e.currentTarget.checked) {
					addToMap(target);
				} else {
					removeFromMap(target);
				}
			});
		});

		var uk = {lat: 53.867795, lng: -1.912358} // Keighley, motherflippers!
		// Create the map
		var map = new google.maps.Map(document.getElementById('map'), {
			zoom: 8,
			center: uk,
			disableDefaultUI: true,
			mapTypeId: 'roadmap'
		});

		centerMap(uk, 7);
		addToMap('markers');
		zoomToFit();

		const populateSidebar = (franchise) => {
			let sidebar = document.querySelector('.sidebar-right');
			let name = sidebar.querySelector('.js-value-name');
			let address = sidebar.querySelector('.js-value-address');
			let status = sidebar.querySelector('.js-value-status');
			name.innerText = franchise.name;
			status.innerText = franchise.status;
			sidebar.style.boxShadow = `inset 0 1rem 0 ${franchise.color}`;
			sidebar.setAttribute('data-state', 'is-active');
			document.querySelector('.sidebar-left').setAttribute('data-state', 'not-active');
			document.querySelector('.sidebar-left').querySelector('.js-toggle-sidebar').innerText = 'chevron_right';
			sidebar.querySelector('.js-toggle-sidebar').innerText = 'chevron_left';
			geocoder.geocode({'location': franchise.location}, function(results, status) {
				var components = results[0].address_components;
				var last = (components.length - 1);
				address_formatted = `${components[last].long_name}`;
				address.innerText = address_formatted;
			});
		}
	}
</script>
<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js" type="text/javascript"></script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBQmSQM1aIdV01g3OMEcve4oHsTkZxVzXE&callback=initMap"></script>